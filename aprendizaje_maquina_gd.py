# -*- coding: utf-8 -*-
"""Aprendizaje_Maquina_GD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XnFkhnJEi5qAmTrEP-XazLyzkrEuOOJA

## Importacion de los datos
"""

import pandas as pd
import numpy as np
import os

data = pd.read_csv(os.path.join(os.path.dirname(__file__), "alimentos.csv"))
print(data.info())

"""## Seleccion de datos"""

# El modelo predecira la cantida de calorias de un alimento a partir del contenido de carbohidratos, lipidos, proteinas y sodio del mismo; de este modo eliminamos las demas columnas, no necesarias
# Eliminamos las columnas que no necesitamos
data = data.drop(['Fecha', 'Hora', 'Nombre', 'Sodio (mg)'], axis=1)

# Los datos no se encuentran ordenados de ninguna manera, podemos dividirlos en 2 datasets: entrenamiento (80%) y testing (20%)
data_train = data.iloc[:round(data.shape[0] * .80), :]
data_test = data.iloc[round(data.shape[0] * .80):, :]

print('\nTotal de datos:', len(data))
print('No. de datos de entreamiento:', len(data_train))
print('No. de datos para prediccion:', len(data_test))

# Dividimos cada una de las variables dependientes e independientes
x1_train = data_train['Carbohidratos (g)']
x2_train = data_train['Lipidos (g)']
x3_train = data_train['Proteinas (g)']
x4_train = data_train['Sodio (g)']

x1_test = data_test['Carbohidratos (g)']
x2_test = data_test['Lipidos (g)']
x3_test = data_test['Proteinas (g)']
x4_test = data_test['Sodio (g)']

y_train = data_test["Calorias (Cal)"]
y_test = data_test["Calorias (Cal)"]

"""## Generacion del modelo
### **Gradiente Descendiente**
"""

# Funcion de Hipotesis
h = lambda x0, x1, x2, x3, theta: theta[0] + theta[1] *x0 + theta[2] *x1 + theta[3] *x2 + theta[4] *x3

# Funcion auxiliar (parcial) de la funcion de costo
j_i = lambda x0, x1, x2, x3, y, theta: (h(x0, x1, x2, x3, theta)-y)**2

#[3,5,2,2,2]
# Parametros e hiper-parametro
theta = [7,4,8,3,-2]
alpha = 0.0000000007

n_iter = 70000

"""### a"""

# Datos necesarios para las formulas
n_train = len(data_train)
n_test = len(data_test)

# Ciclo para iterar n catidad de veces sobre el modelo
for idx in range(n_iter):
  acumDelta0 = []
  acumDelta1 = []
  acumDelta2 = []
  acumDelta3 = []
  acumDelta4 = []
  
  for x1, x2, x3, x4, y in zip(x1_train, x2_train, x3_train, x4_train, y_train):
    acumDelta0.append(h(x1, x2, x3, x4, theta) - y)
    acumDelta1.append(h(x1, x2, x3, x4, theta) - y * x1)
    acumDelta2.append(h(x1, x2, x3, x4, theta) - y * x2)
    acumDelta3.append(h(x1, x2, x3, x4, theta) - y * x3)
    acumDelta4.append(h(x1, x2, x3, x4, theta) - y * x4)

  # Sumatoria de los deltas calculados anteriormente, que se emplearan para calcular los nuevos thetas
  sum_j0 = sum(acumDelta0)
  sum_j1 = sum(acumDelta1)
  sum_j2 = sum(acumDelta2)
  sum_j3 = sum(acumDelta3)
  sum_j4 = sum(acumDelta4)

  # Calculo de los nuevos thetas (coeficientes del modelo)
  theta[0] = theta[0] - alpha / n_train * sum_j0
  theta[1] = theta[1] - alpha / n_train * sum_j1
  theta[2] = theta[2] - alpha / n_train * sum_j2
  theta[3] = theta[3] - alpha / n_train * sum_j3
  theta[4] = theta[4] - alpha / n_train * sum_j4

# Impresion de los thetas obtenidos finalmente
print('\nThetas calculados:', theta)

"""## Validacion del modelo"""

# Calculo de Error con los datos de prueba/validacion
acum_delta = []
for x1, x2, x3, x4, y in zip(x1_test, x2_test, x3_test, x4_test, y_test):
  acum_delta.append(j_i(x1, x2, x3, x4, y, theta))  

sum_delta = sum(acum_delta)  
j_test = 1/(2*n_test)*sum_delta

# Impresion del Error de prueba/validacion
print('\nError de validacion:', j_test)

# Calculo de Error de los datos de entrenamiento
acum_delta = []
for x1, x2, x3, x4, y in zip(x1_train, x2_train, x3_train, x4_train, y_train):
  acum_delta.append(j_i(x1, x2, x3, x4, y, theta)) 

sDelta = sum(acum_delta)  
j_train = 1/(2*n_train)*sDelta

# Impresion del Error con los datos de entrenamiento
print('Error de entrenamiento:', j_train)

"""## Predicciones"""

#y_pred = []
y_pred = round(h(data['Carbohidratos (g)'], data['Lipidos (g)'], data['Proteinas (g)'], data['Sodio (g)'], theta))

comp_table = pd.DataFrame({'Real': data['Calorias (Cal)'], 'Prediccion': y_pred})
print('\n')
print(comp_table.head(25))